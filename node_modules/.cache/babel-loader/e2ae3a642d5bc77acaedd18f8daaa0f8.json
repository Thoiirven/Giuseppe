{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/c/Users/kikim/OneDrive/Bureau/sentinelle-politique/src/FranceMap/index.js\";\nimport React, { Component } from 'react';\nimport { select, geoPath, geoConicConformal, json } from \"d3\";\n\nfunction getElection(annee, presidents) {\n  for (let i = 0; i < 8; i++) {\n    if (annee == presidents[i].Annee) {\n      console.log(presidents[i].Annee);\n      return presidents[i];\n    }\n  }\n}\n\nfunction getCouleur(dep, data, candidats) {\n  var nbVotes1 = 0,\n      nbVotes2 = 0;\n  var nom1 = candidats.Candidat1.Prenom + \" \" + candidats.Candidat1.Nom + \" (\" + candidats.Candidat1.PartiPol + \")\";\n  var nom2 = candidats.Candidat2.Prenom + \" \" + candidats.Candidat2.Nom + \" (\" + candidats.Candidat2.PartiPol + \")\";\n  data.forEach(elem => {\n    if (elem[\"Code du département\"] === dep) {\n      nbVotes1 += elem[nom1];\n      nbVotes2 += elem[nom2];\n    }\n  });\n\n  if (nbVotes1 > nbVotes2) {\n    return candidats.Candidat1.CodeCouleur;\n  } else return candidats.Candidat2.CodeCouleur;\n}\n\nclass Carte extends Component {\n  constructor(props, anne) {\n    super(props);\n    this.anne = anne;\n    this.createCarte = this.createCarte.bind(this);\n  }\n\n  componentDidMount() {\n    this.createCarte();\n    /*\r\n        chargement des données ici\r\n    */\n  }\n\n  componentDidUpdate() {\n    select('#svg-carte').remove(); // Quand on a une nouvelle selection on supprime les anciens svg pour eviter d'avoir une superposition des cartes\n\n    /*\r\n        remplacer la data par la nouvelle data\r\n    */\n\n    this.createCarte();\n  }\n\n  createCarte() {\n    /*\r\n        Creer elem vide\r\n    */\n    console.log(this.props.data);\n    console.log(this.props.data);\n    const node = this.node;\n    const width = 1000,\n          height = 500;\n    const projection = geoConicConformal().center([2.454071, 46.279229]).scale(2500); //.translate([width/2, height/2]);\n\n    const path = geoPath().projection(projection);\n    const svg = select(node).append(\"svg\").attr(\"id\", \"svg-carte\").attr(\"width\", width).attr(\"height\", height);\n    const carte_container = svg.append('g');\n    var promises = [];\n    promises.push(json('./data/' + annee + '.json'));\n    promises.push(json('./geofla/' + this.props.data + '.json'));\n    promises.push(json('./data/elections.json'));\n    Promise.all(promises).then(function (proms) {\n      const votes = proms[0];\n      const geojson = proms[1];\n      const presidents = proms[2];\n      console.log(\"passe la aussi\");\n      const features = carte_container.selectAll('path').data(geojson.features).enter().append('path').attr('id', d => \"d\" + d.properties.CODE_DEPT).attr('d', path).attr('fill', d => getCouleur(d.properties.CODE_DEPT, votes, getElection(annee, promises[2])));\n    });\n    console.log('passé la aussi');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: node => this.node = node\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Carte;","map":{"version":3,"sources":["/mnt/c/Users/kikim/OneDrive/Bureau/sentinelle-politique/src/FranceMap/index.js"],"names":["React","Component","select","geoPath","geoConicConformal","json","getElection","annee","presidents","i","Annee","console","log","getCouleur","dep","data","candidats","nbVotes1","nbVotes2","nom1","Candidat1","Prenom","Nom","PartiPol","nom2","Candidat2","forEach","elem","CodeCouleur","Carte","constructor","props","anne","createCarte","bind","componentDidMount","componentDidUpdate","remove","node","width","height","projection","center","scale","path","svg","append","attr","carte_container","promises","push","Promise","all","then","proms","votes","geojson","features","selectAll","enter","d","properties","CODE_DEPT","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { select, geoPath, geoConicConformal, json } from \"d3\";\r\n\r\nfunction getElection(annee, presidents) {\r\n    for (let i = 0; i < 8 ; i++){\r\n        if (annee == presidents[i].Annee){\r\n            console.log(presidents[i].Annee);\r\n            return presidents[i];\r\n        }\r\n    }  \r\n}\r\n\r\nfunction getCouleur(dep, data, candidats) {\r\n    var nbVotes1 = 0,\r\n        nbVotes2 = 0;\r\n    var nom1 =  candidats.Candidat1.Prenom + \" \" + candidats.Candidat1.Nom + \" (\" + candidats.Candidat1.PartiPol + \")\";\r\n    var nom2 =  candidats.Candidat2.Prenom + \" \" + candidats.Candidat2.Nom + \" (\" + candidats.Candidat2.PartiPol + \")\";\r\n    data.forEach(elem => {\r\n        if (elem[\"Code du département\"] === dep) {\r\n                nbVotes1 += elem[nom1];\r\n                nbVotes2 += elem[nom2];\r\n            }\r\n        });\r\n    \r\n    if (nbVotes1 > nbVotes2){\r\n        return candidats.Candidat1.CodeCouleur;\r\n    }\r\n    else\r\n        return candidats.Candidat2.CodeCouleur;\r\n}\r\n \r\nclass Carte extends Component {\r\n    anne;\r\n    constructor(props,anne){\r\n        super(props);\r\n        this.anne=anne;\r\n        this.createCarte = this.createCarte.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.createCarte();\r\n        /*\r\n            chargement des données ici\r\n        */\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        select('#svg-carte').remove(); // Quand on a une nouvelle selection on supprime les anciens svg pour eviter d'avoir une superposition des cartes\r\n        /*\r\n            remplacer la data par la nouvelle data\r\n        */\r\n        this.createCarte();\r\n    }\r\n\r\n    createCarte(){\r\n        /*\r\n            Creer elem vide\r\n        */\r\n        \r\n\r\n        console.log(this.props.data);\r\n        console.log(this.props.data);\r\n        const node = this.node;\r\n        const width = 1000, height =500;\r\n\r\n        const projection =  geoConicConformal()\r\n                            .center([2.454071, 46.279229])\r\n                            .scale(2500);\r\n                            //.translate([width/2, height/2]);\r\n\r\n        const path = geoPath()\r\n                    .projection(projection);\r\n\r\n        const svg = select(node)\r\n                    .append(\"svg\")\r\n                    .attr(\"id\", \"svg-carte\")\r\n                    .attr(\"width\", width)\r\n                    .attr(\"height\", height);\r\n\r\n        const carte_container = svg.append('g');\r\n\r\n        var promises = [];\r\n        promises.push(json('./data/'+annee+'.json'));\r\n        promises.push(json('./geofla/'+this.props.data+'.json'));\r\n        promises.push(json('./data/elections.json'));\r\n\r\n        \r\n        Promise.all(promises).then(function (proms){\r\n            const votes = proms[0];\r\n            const geojson = proms[1];\r\n            const presidents = proms[2];\r\n            console.log(\"passe la aussi\");\r\n            const features = carte_container.selectAll('path')\r\n                                            .data(geojson.features)\r\n                                            .enter()\r\n                                            .append('path')\r\n                                            .attr('id', d => \"d\" + d.properties.CODE_DEPT)\r\n                                            .attr('d', path)\r\n                                            .attr('fill', d => getCouleur(d.properties.CODE_DEPT, votes, getElection(annee,promises[2])));\r\n        });console.log('passé la aussi');\r\n    }\r\n\r\n    render(){\r\n        return <div ref={node => this.node = node}/>\r\n    }\r\n}\r\n\r\nexport default Carte;"]},"metadata":{},"sourceType":"module"}